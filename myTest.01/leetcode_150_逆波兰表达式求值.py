'''
    150. 逆波兰表达式求值
    根据 逆波兰表示法，求表达式的值。
    有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。
    注意 两个整数之间的除法只保留整数部分。
    可以保证给定的逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
    示例 1：
    输入：tokens = ["2","1","+","3","*"]
    输出：9
    解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9
    示例 2：
    输入：tokens = ["4","13","5","/","+"]
    输出：6
    解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6
    示例 3：
    输入：tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
    输出：22
    解释：该算式转化为常见的中缀算术表达式为：
      ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
    = ((10 * (6 / (12 * -11))) + 17) + 5
    = ((10 * (6 / -132)) + 17) + 5
    = ((10 * 0) + 17) + 5
    = (0 + 17) + 5
    = 17 + 5
    = 22
    提示：
    1 <= tokens.length <= 104
    tokens[i] 是一个算符（"+"、"-"、"*" 或 "/"），或是在范围 [-200, 200] 内的一个整数
    逆波兰表达式：
    逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。
    平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。
    该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。
    逆波兰表达式主要有以下两个优点：
    去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。
    适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中

    2.2 坑二，除法的规则要注意一致性
    python 的整数除法是向下取整，而不是向零取整。
    python2 的除法 "/" 是整数除法， "-3 / 2 = -2"；
    python3 的地板除 "//" 是整数除法， "-3 // 2 = -2" ；
    python3 的除法 "/" 是浮点除法， "-3 / 2 = -1.5"；
    而 C++/Java 中的整数除法是向零取整。
    C++/Java 中 "-3 / 2 = -1"
    本题的题意（一般情况）都是要求向零取整的。
    对 Python 的整数除法问题，可以用 int(num1 / float(num2)) 来做，即先用浮点数除法，然后取整。
'''
# tokens = ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        operational_character_set = {"+", "-", "*", "/"}
        stack = []
        result = 0
        if len(tokens) == 1:
            return int(tokens[0])
        for i, item in enumerate(tokens):
            if stack and item in operational_character_set:
                if item == "+":
                    result = int(stack[-2]) + int(stack[-1])
                elif item == "-":
                    result = int(stack[-2]) - int(stack[-1])
                elif item == "*":
                    result = int(stack[-2]) * int(stack[-1])
                elif item == "/":
                    result = int(int(stack[-2]) / float(stack[-1]))
                stack.pop()
                stack.pop()
                stack.append(result)
            else:
                stack.append(item)
        print(result)
        return result